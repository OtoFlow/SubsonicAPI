// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// - Remark: HTTP `GET /ping`.
    /// - Remark: Generated from `#/paths//ping/get(ping)`.
    func ping(_ input: Operations.ping.Input) async throws -> Operations.ping.Output
    /// - Remark: HTTP `POST /ping.view`.
    /// - Remark: Generated from `#/paths//ping.view/post(signIn)`.
    func signIn(_ input: Operations.signIn.Input) async throws -> Operations.signIn.Output
    /// - Remark: HTTP `GET /getAlbumList`.
    /// - Remark: Generated from `#/paths//getAlbumList/get(getAlbumList)`.
    func getAlbumList(_ input: Operations.getAlbumList.Input) async throws -> Operations.getAlbumList.Output
    /// - Remark: HTTP `GET /getRandomSongs`.
    /// - Remark: Generated from `#/paths//getRandomSongs/get(getRandomSongs)`.
    func getRandomSongs(_ input: Operations.getRandomSongs.Input) async throws -> Operations.getRandomSongs.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// - Remark: HTTP `GET /ping`.
    /// - Remark: Generated from `#/paths//ping/get(ping)`.
    public func ping(headers: Operations.ping.Input.Headers = .init()) async throws -> Operations.ping.Output {
        try await ping(Operations.ping.Input(headers: headers))
    }
    /// - Remark: HTTP `POST /ping.view`.
    /// - Remark: Generated from `#/paths//ping.view/post(signIn)`.
    public func signIn(
        query: Operations.signIn.Input.Query,
        headers: Operations.signIn.Input.Headers = .init()
    ) async throws -> Operations.signIn.Output {
        try await signIn(Operations.signIn.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /getAlbumList`.
    /// - Remark: Generated from `#/paths//getAlbumList/get(getAlbumList)`.
    public func getAlbumList(
        query: Operations.getAlbumList.Input.Query,
        headers: Operations.getAlbumList.Input.Headers = .init()
    ) async throws -> Operations.getAlbumList.Output {
        try await getAlbumList(Operations.getAlbumList.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /getRandomSongs`.
    /// - Remark: Generated from `#/paths//getRandomSongs/get(getRandomSongs)`.
    public func getRandomSongs(
        query: Operations.getRandomSongs.Input.Query = .init(),
        headers: Operations.getRandomSongs.Input.Headers = .init()
    ) async throws -> Operations.getRandomSongs.Output {
        try await getRandomSongs(Operations.getRandomSongs.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/ResponseError`.
        @frozen public enum ResponseError: Int, Codable, Hashable, Sendable, CaseIterable {
            case _0 = 0
            case _10 = 10
            case _20 = 20
            case _30 = 30
            case _40 = 40
            case _41 = 41
            case _50 = 50
            case _60 = 60
            case _70 = 70
        }
        /// - Remark: Generated from `#/components/schemas/SubsonicResponse`.
        public struct SubsonicResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubsonicResponse/subsonic-response`.
            public var subsonic_hyphen_response: Components.Schemas.Response
            /// Creates a new `SubsonicResponse`.
            ///
            /// - Parameters:
            ///   - subsonic_hyphen_response:
            public init(subsonic_hyphen_response: Components.Schemas.Response) {
                self.subsonic_hyphen_response = subsonic_hyphen_response
            }
            public enum CodingKeys: String, CodingKey {
                case subsonic_hyphen_response = "subsonic-response"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Response`.
        public struct Response: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Response/status`.
            public var status: Components.Schemas.ResponseStatus
            /// - Remark: Generated from `#/components/schemas/Response/version`.
            public var version: Components.Schemas.Version
            /// - Remark: Generated from `#/components/schemas/Response/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Response/serverVersion`.
            public var serverVersion: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Response/openSubsonic`.
            public var openSubsonic: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Response/error`.
            public var error: Components.Schemas.ResponseError?
            /// Creates a new `Response`.
            ///
            /// - Parameters:
            ///   - status:
            ///   - version:
            ///   - _type:
            ///   - serverVersion:
            ///   - openSubsonic:
            ///   - error:
            public init(
                status: Components.Schemas.ResponseStatus,
                version: Components.Schemas.Version,
                _type: Swift.String? = nil,
                serverVersion: Swift.String? = nil,
                openSubsonic: Swift.Bool? = nil,
                error: Components.Schemas.ResponseError? = nil
            ) {
                self.status = status
                self.version = version
                self._type = _type
                self.serverVersion = serverVersion
                self.openSubsonic = openSubsonic
                self.error = error
            }
            public enum CodingKeys: String, CodingKey {
                case status
                case version
                case _type = "type"
                case serverVersion
                case openSubsonic
                case error
            }
        }
        /// - Remark: Generated from `#/components/schemas/ResponseStatus`.
        @frozen public enum ResponseStatus: String, Codable, Hashable, Sendable, CaseIterable {
            case ok = "ok"
            case failed = "failed"
        }
        /// - Remark: Generated from `#/components/schemas/Version`.
        public typealias Version = Swift.String
        /// - Remark: Generated from `#/components/schemas/ListType`.
        @frozen public enum ListType: String, Codable, Hashable, Sendable, CaseIterable {
            case random = "random"
            case newest = "newest"
            case highest = "highest"
            case frequent = "frequent"
            case recent = "recent"
            case alphabeticalByName = "alphabeticalByName"
            case alphabeticalByArtist = "alphabeticalByArtist"
            case starred = "starred"
            case byYear = "byYear"
            case byGenre = "byGenre"
        }
        /// - Remark: Generated from `#/components/schemas/AlbumList`.
        public struct AlbumList: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AlbumList/album`.
            public var album: [Components.Schemas.Album]
            /// Creates a new `AlbumList`.
            ///
            /// - Parameters:
            ///   - album:
            public init(album: [Components.Schemas.Album]) {
                self.album = album
            }
            public enum CodingKeys: String, CodingKey {
                case album
            }
        }
        /// - Remark: Generated from `#/components/schemas/Album`.
        public typealias Album = Components.Schemas.Child
        /// - Remark: Generated from `#/components/schemas/Artist`.
        public struct Artist: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Artist/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Artist/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Artist/artistImageUrl`.
            public var artistImageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Artist/starred`.
            public var starred: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Artist/userRating`.
            public var userRating: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Artist/averageRating`.
            public var averageRating: Swift.Double?
            /// Creates a new `Artist`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - artistImageUrl:
            ///   - starred:
            ///   - userRating:
            ///   - averageRating:
            public init(
                id: Swift.String,
                name: Swift.String,
                artistImageUrl: Swift.String? = nil,
                starred: Foundation.Date? = nil,
                userRating: Swift.Int? = nil,
                averageRating: Swift.Double? = nil
            ) {
                self.id = id
                self.name = name
                self.artistImageUrl = artistImageUrl
                self.starred = starred
                self.userRating = userRating
                self.averageRating = averageRating
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case artistImageUrl
                case starred
                case userRating
                case averageRating
            }
        }
        /// - Remark: Generated from `#/components/schemas/Songs`.
        public struct Songs: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Songs/song`.
            public var song: [Components.Schemas.Song]
            /// Creates a new `Songs`.
            ///
            /// - Parameters:
            ///   - song:
            public init(song: [Components.Schemas.Song]) {
                self.song = song
            }
            public enum CodingKeys: String, CodingKey {
                case song
            }
        }
        /// - Remark: Generated from `#/components/schemas/Song`.
        public typealias Song = Components.Schemas.Child
        /// - Remark: Generated from `#/components/schemas/Child`.
        public struct Child: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Child/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Child/parent`.
            public var parent: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/isDir`.
            public var isDir: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Child/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/Child/album`.
            public var album: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/artist`.
            public var artist: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/track`.
            public var track: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/year`.
            public var year: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/genre`.
            public var genre: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/duration`.
            public var duration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/isVideo`.
            public var isVideo: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Child/playCount`.
            public var playCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/discNumber`.
            public var discNumber: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/created`.
            public var created: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Child/starred`.
            public var starred: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Child/albumId`.
            public var albumId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/artistId`.
            public var artistId: Swift.String?
            /// Creates a new `Child`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - parent:
            ///   - isDir:
            ///   - title:
            ///   - album:
            ///   - artist:
            ///   - track:
            ///   - year:
            ///   - genre:
            ///   - duration:
            ///   - isVideo:
            ///   - playCount:
            ///   - discNumber:
            ///   - created:
            ///   - starred:
            ///   - albumId:
            ///   - artistId:
            public init(
                id: Swift.String,
                parent: Swift.String? = nil,
                isDir: Swift.Bool,
                title: Swift.String,
                album: Swift.String? = nil,
                artist: Swift.String? = nil,
                track: Swift.Int? = nil,
                year: Swift.Int? = nil,
                genre: Swift.String? = nil,
                duration: Swift.Int? = nil,
                isVideo: Swift.Bool? = nil,
                playCount: Swift.Int? = nil,
                discNumber: Swift.Int? = nil,
                created: Foundation.Date? = nil,
                starred: Foundation.Date? = nil,
                albumId: Swift.String? = nil,
                artistId: Swift.String? = nil
            ) {
                self.id = id
                self.parent = parent
                self.isDir = isDir
                self.title = title
                self.album = album
                self.artist = artist
                self.track = track
                self.year = year
                self.genre = genre
                self.duration = duration
                self.isVideo = isVideo
                self.playCount = playCount
                self.discNumber = discNumber
                self.created = created
                self.starred = starred
                self.albumId = albumId
                self.artistId = artistId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case parent
                case isDir
                case title
                case album
                case artist
                case track
                case year
                case genre
                case duration
                case isVideo
                case playCount
                case discNumber
                case created
                case starred
                case albumId
                case artistId
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// - Remark: HTTP `GET /ping`.
    /// - Remark: Generated from `#/paths//ping/get(ping)`.
    public enum ping {
        public static let id: Swift.String = "ping"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/ping/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ping.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ping.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ping.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.ping.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ping/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ping/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/ping/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Components.Schemas.Response
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Components.Schemas.Response) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/ping/GET/responses/200/content/application\/json`.
                    case json(Operations.ping.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.ping.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ping.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ping.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//ping/get(ping)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ping.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ping.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /ping.view`.
    /// - Remark: Generated from `#/paths//ping.view/post(signIn)`.
    public enum signIn {
        public static let id: Swift.String = "signIn"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/ping.view/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ping.view/POST/query/u`.
                public var u: Swift.String
                /// - Remark: Generated from `#/paths/ping.view/POST/query/t`.
                public var t: Swift.String
                /// - Remark: Generated from `#/paths/ping.view/POST/query/s`.
                public var s: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - u:
                ///   - t:
                ///   - s:
                public init(
                    u: Swift.String,
                    t: Swift.String,
                    s: Swift.String
                ) {
                    self.u = u
                    self.t = t
                    self.s = s
                }
            }
            public var query: Operations.signIn.Input.Query
            /// - Remark: Generated from `#/paths/ping.view/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.signIn.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.signIn.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.signIn.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.signIn.Input.Query,
                headers: Operations.signIn.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ping.view/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ping.view/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/ping.view/POST/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Components.Schemas.Response
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Components.Schemas.Response) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/ping.view/POST/responses/200/content/application\/json`.
                    case json(Operations.signIn.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.signIn.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/ping.view/POST/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    public var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.signIn.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.signIn.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//ping.view/post(signIn)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.signIn.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.signIn.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .xml
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /getAlbumList`.
    /// - Remark: Generated from `#/paths//getAlbumList/get(getAlbumList)`.
    public enum getAlbumList {
        public static let id: Swift.String = "getAlbumList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getAlbumList/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getAlbumList/GET/query/type`.
                public var _type: Components.Schemas.ListType
                /// - Remark: Generated from `#/paths/getAlbumList/GET/query/size`.
                public var size: Swift.Int?
                /// - Remark: Generated from `#/paths/getAlbumList/GET/query/offset`.
                public var offset: Swift.Int?
                /// - Remark: Generated from `#/paths/getAlbumList/GET/query/fromYear`.
                public var fromYear: Swift.Int?
                /// - Remark: Generated from `#/paths/getAlbumList/GET/query/toYear`.
                public var toYear: Swift.Int?
                /// - Remark: Generated from `#/paths/getAlbumList/GET/query/genre`.
                public var genre: Swift.String?
                /// - Remark: Generated from `#/paths/getAlbumList/GET/query/musicFolderId`.
                public var musicFolderId: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - size:
                ///   - offset:
                ///   - fromYear:
                ///   - toYear:
                ///   - genre:
                ///   - musicFolderId:
                public init(
                    _type: Components.Schemas.ListType,
                    size: Swift.Int? = nil,
                    offset: Swift.Int? = nil,
                    fromYear: Swift.Int? = nil,
                    toYear: Swift.Int? = nil,
                    genre: Swift.String? = nil,
                    musicFolderId: Swift.Int? = nil
                ) {
                    self._type = _type
                    self.size = size
                    self.offset = offset
                    self.fromYear = fromYear
                    self.toYear = toYear
                    self.genre = genre
                    self.musicFolderId = musicFolderId
                }
            }
            public var query: Operations.getAlbumList.Input.Query
            /// - Remark: Generated from `#/paths/getAlbumList/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAlbumList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAlbumList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAlbumList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getAlbumList.Input.Query,
                headers: Operations.getAlbumList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content/json/subsonic-response`.
                        public struct subsonic_hyphen_responsePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content/json/subsonic-response/value1`.
                            public var value1: Components.Schemas.Response
                            /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content/json/subsonic-response/value2`.
                            public struct Value2Payload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content/json/subsonic-response/value2/albumList`.
                                public var albumList: Components.Schemas.AlbumList
                                /// Creates a new `Value2Payload`.
                                ///
                                /// - Parameters:
                                ///   - albumList:
                                public init(albumList: Components.Schemas.AlbumList) {
                                    self.albumList = albumList
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case albumList
                                }
                            }
                            /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content/json/subsonic-response/value2`.
                            public var value2: Operations.getAlbumList.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            /// Creates a new `subsonic_hyphen_responsePayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Response,
                                value2: Operations.getAlbumList.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                value1 = try .init(from: decoder)
                                value2 = try .init(from: decoder)
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1.encode(to: encoder)
                                try value2.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Operations.getAlbumList.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Operations.getAlbumList.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content/application\/json`.
                    case json(Operations.getAlbumList.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getAlbumList.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAlbumList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAlbumList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//getAlbumList/get(getAlbumList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAlbumList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAlbumList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /getRandomSongs`.
    /// - Remark: Generated from `#/paths//getRandomSongs/get(getRandomSongs)`.
    public enum getRandomSongs {
        public static let id: Swift.String = "getRandomSongs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getRandomSongs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getRandomSongs/GET/query/size`.
                public var size: Swift.Int?
                /// - Remark: Generated from `#/paths/getRandomSongs/GET/query/genre`.
                public var genre: Swift.String?
                /// - Remark: Generated from `#/paths/getRandomSongs/GET/query/fromYear`.
                public var fromYear: Foundation.Date?
                /// - Remark: Generated from `#/paths/getRandomSongs/GET/query/toYear`.
                public var toYear: Foundation.Date?
                /// - Remark: Generated from `#/paths/getRandomSongs/GET/query/musicFolderId`.
                public var musicFolderId: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - size:
                ///   - genre:
                ///   - fromYear:
                ///   - toYear:
                ///   - musicFolderId:
                public init(
                    size: Swift.Int? = nil,
                    genre: Swift.String? = nil,
                    fromYear: Foundation.Date? = nil,
                    toYear: Foundation.Date? = nil,
                    musicFolderId: Swift.Int? = nil
                ) {
                    self.size = size
                    self.genre = genre
                    self.fromYear = fromYear
                    self.toYear = toYear
                    self.musicFolderId = musicFolderId
                }
            }
            public var query: Operations.getRandomSongs.Input.Query
            /// - Remark: Generated from `#/paths/getRandomSongs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRandomSongs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRandomSongs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getRandomSongs.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getRandomSongs.Input.Query = .init(),
                headers: Operations.getRandomSongs.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content/json/subsonic-response`.
                        public struct subsonic_hyphen_responsePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content/json/subsonic-response/value1`.
                            public var value1: Components.Schemas.Response
                            /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content/json/subsonic-response/value2`.
                            public struct Value2Payload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content/json/subsonic-response/value2/randomSongs`.
                                public var randomSongs: Components.Schemas.Songs
                                /// Creates a new `Value2Payload`.
                                ///
                                /// - Parameters:
                                ///   - randomSongs:
                                public init(randomSongs: Components.Schemas.Songs) {
                                    self.randomSongs = randomSongs
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case randomSongs
                                }
                            }
                            /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content/json/subsonic-response/value2`.
                            public var value2: Operations.getRandomSongs.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            /// Creates a new `subsonic_hyphen_responsePayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Response,
                                value2: Operations.getRandomSongs.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                value1 = try .init(from: decoder)
                                value2 = try .init(from: decoder)
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1.encode(to: encoder)
                                try value2.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Operations.getRandomSongs.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Operations.getRandomSongs.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content/application\/json`.
                    case json(Operations.getRandomSongs.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getRandomSongs.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRandomSongs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRandomSongs.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//getRandomSongs/get(getRandomSongs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRandomSongs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRandomSongs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
